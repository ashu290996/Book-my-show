pipeline {
    agent any

    tools {
        jdk 'jdk21'
        nodejs 'nodejs24'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_IMAGE = 'ashu290996/bms:latest'
    }
    parameters {
        booleanParam(name: 'GIT_CHECKOUT', defaultValue: true, description: 'Branch to checkout from Git')
        booleanParam(name: 'SONARQUBE', defaultValue: true,  description: 'SonarQube Server')
        booleanParam(name: 'INSTALL_DEPENDENCIES', defaultValue: true, description: 'Install project dependencies')
        booleanParam(name: 'OWASP_SCAN', defaultValue: true, description: 'OWASP Dependency scan')
        booleanParam(name: 'TRIVY_SCAN', defaultValue: true, description: 'TRIVY scan')
        booleanParam(name: 'DOCKER_BUILD_PUSH', defaultValue: true, description: 'Build and Push Docker image')
        booleanParam(name: 'DEPLOY_K8', defaultValue: true, description: 'Deploy to Kubernetes cluster')
        booleanParam(name: 'DEPLOY_MONITORING', defaultValue: true, description: 'Deploy Monitoring stack on K8S')
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            when { expression{ params.GIT_CHECKOUT }}
            steps {
                git branch: 'master', credentialsId: 'github-login', url: 'https://github.com/ashu290996/Book-my-show.git'
                sh 'ls -la'  // Verify files after checkout
            }
        }

        stage('SonarQube Analysis') {
            when { expression { params.SONARQUBE }}
            steps {
                withSonarQubeEnv('sonar-scanner') {
                    sh '''
                    $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=BMS \
                        -Dsonar.projectKey=BMS
                    '''
                }
            }
        }

        // stage('Quality Gate') {
        //     steps {
        //         script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'sonar-scanner'
        //         }
        //     }
        // }

        stage('Install Dependencies') {
            steps {
                when {expression { params.INSTALL_DEPENDENCIES }}
                sh '''
                cd bookmyshow-app
                ls -la  # Verify package.json exists
                if [ -f package.json ]; then
                    rm -rf node_modules package-lock.json  # Remove old dependencies
                    npm install  # Install fresh dependencies
                else
                    echo "Error: package.json not found in bookmyshow-app!"
                    exit 1
                fi
                '''
            }
        }

        stage('OWASP FS Scan') {
            when { expression { params.OWASP_SCAN }}
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Trivy FS Scan') {
            when { expression { params.TRIVY_SCAN }}
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    /* groovylint-disable-next-line NestedBlockDepth */
                    withDockerRegistry(credentialsId: 'dockerhub', url: 'https://index.docker.io/v1/') {
                        sh '''
                        echo "Building Docker image..."
                        docker build --no-cache -t $DOCKER_IMAGE -f bookmyshow-app/Dockerfile bookmyshow-app

                        echo "Pushing Docker image to Docker Hub..."
                        docker push $DOCKER_IMAGE
                        '''
                    }
                }
            }
        }

        stage('Deploy to AKS Cluster') {
            when { expression { params.DEPLOY_K8 }}
            steps {
                script {
                    sh '''
                    echo "Deploying application to AKS..."
                    kubectl apply -f deployment.yml
                    kubectl apply -f service.yml

                    echo "Verifying deployment..."
                    kubectl get pods
                    kubectl get svc
                    '''
                }
            }
        }

        stage('Deploy Monitoring') {
            when { expression {params.RDEPLOY_MONITORING}}
            steps {
            withKubeConfig(caCertificate: '', clusterName: 'bms', contextName: '', credentialsId: 'k8-prod-token', namespace: 'prod', restrictKubeConfigAccess: false, serverUrl: 'https://bms-dns-ce2unfre.hcp.eastus.azmk8s.io:443') 
            {
                    sh '''
               curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
               chmod 700 get_helm.sh
               ./get_helm.sh
               helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
               helm repo update
               helm upgrade --install monitoring prometheus-community/kube-prometheus-stack -f Monitoring/values.yaml -n monitoring --create-namespace
               '''
            }
            }

        }

    }

// post {
//     always {
//         emailext attachLog: true,
//             subject: "'${currentBuild.result}'",
//             body: "Project: ${env.JOB_NAME}<br/>" +
//                   "Build Number: ${env.BUILD_NUMBER}<br/>" +
//                   "URL: ${env.BUILD_URL}<br/>",
//             to: 'kastrokiran@gmail.com',
//             attachmentsPattern: 'trivyfs.txt'
//     }
// }
}
